<?php
/**
 * V2AvailablePropertyAgentDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advertising Integration API
 *
 * The 'Advertising' integration focuses on allowing 3rd party systems and customized websites to sync available properties from Palace to display up-to-date advertising on a company's website.<BR><BR>The 'Advertising Integration' area does NOT require an upgrade from a 'Standard' API account to a 'Premium' API Account. There is a NO cost involved in using these contracts unless you are a 3rd Party solution provider wanting to integrate at a partner level.<BR><BR>The following is a list of contracts to integrate 'Available Properties' into a public website.  The first contract /v2AvailableProperties/JSON provides comprehensive array of currrent available properties with details.<BR><BR>  Every time the call is made to this contract it provides the current list at the time of the call.  If a property is no longer showing in the latest call that existed in previous calls you can use the /v2PreviousAvailableProperty/JSON/ contract to get information regarding the leased or withdrawn status and comments of the properties.<BR><BR> You can get a list of related images to a Property in Base64 encoded string (/v2AvailablePropertyImages/JSON) or a URL (/v2AvailablePropertyImagesURL/JSON/) directly to the JPG file.  Use the Base64 encoded option to download the images to your website<BR><BR> (NOTE: Do not use this contract to render images per request as the resulting request will be too slow to handle this).<BR><BR>  You can use the URL requests to link directly to your site.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: development@getpalace.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V2AvailablePropertyAgentDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2AvailablePropertyAgentDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v2AvailablePropertyAgentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_agent_code' => 'string',
        'property_agent_email1' => 'string',
        'property_agent_email2' => 'string',
        'property_agent_fax' => 'string',
        'property_agent_full_name' => 'string',
        'property_agent_phone_mobile' => 'string',
        'property_agent_phone_work' => 'string',
        'property_agent_title' => 'string',
        'property_external_codes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_agent_code' => 'string',
        'property_agent_email1' => 'string',
        'property_agent_email2' => 'string',
        'property_agent_fax' => 'string',
        'property_agent_full_name' => 'string',
        'property_agent_phone_mobile' => 'string',
        'property_agent_phone_work' => 'string',
        'property_agent_title' => 'string',
        'property_external_codes' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_agent_code' => 'PropertyAgentCode',
        'property_agent_email1' => 'PropertyAgentEmail1',
        'property_agent_email2' => 'PropertyAgentEmail2',
        'property_agent_fax' => 'PropertyAgentFax',
        'property_agent_full_name' => 'PropertyAgentFullName',
        'property_agent_phone_mobile' => 'PropertyAgentPhoneMobile',
        'property_agent_phone_work' => 'PropertyAgentPhoneWork',
        'property_agent_title' => 'PropertyAgentTitle',
        'property_external_codes' => 'PropertyExternalCodes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_agent_code' => 'setPropertyAgentCode',
        'property_agent_email1' => 'setPropertyAgentEmail1',
        'property_agent_email2' => 'setPropertyAgentEmail2',
        'property_agent_fax' => 'setPropertyAgentFax',
        'property_agent_full_name' => 'setPropertyAgentFullName',
        'property_agent_phone_mobile' => 'setPropertyAgentPhoneMobile',
        'property_agent_phone_work' => 'setPropertyAgentPhoneWork',
        'property_agent_title' => 'setPropertyAgentTitle',
        'property_external_codes' => 'setPropertyExternalCodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_agent_code' => 'getPropertyAgentCode',
        'property_agent_email1' => 'getPropertyAgentEmail1',
        'property_agent_email2' => 'getPropertyAgentEmail2',
        'property_agent_fax' => 'getPropertyAgentFax',
        'property_agent_full_name' => 'getPropertyAgentFullName',
        'property_agent_phone_mobile' => 'getPropertyAgentPhoneMobile',
        'property_agent_phone_work' => 'getPropertyAgentPhoneWork',
        'property_agent_title' => 'getPropertyAgentTitle',
        'property_external_codes' => 'getPropertyExternalCodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_agent_code'] = isset($data['property_agent_code']) ? $data['property_agent_code'] : null;
        $this->container['property_agent_email1'] = isset($data['property_agent_email1']) ? $data['property_agent_email1'] : null;
        $this->container['property_agent_email2'] = isset($data['property_agent_email2']) ? $data['property_agent_email2'] : null;
        $this->container['property_agent_fax'] = isset($data['property_agent_fax']) ? $data['property_agent_fax'] : null;
        $this->container['property_agent_full_name'] = isset($data['property_agent_full_name']) ? $data['property_agent_full_name'] : null;
        $this->container['property_agent_phone_mobile'] = isset($data['property_agent_phone_mobile']) ? $data['property_agent_phone_mobile'] : null;
        $this->container['property_agent_phone_work'] = isset($data['property_agent_phone_work']) ? $data['property_agent_phone_work'] : null;
        $this->container['property_agent_title'] = isset($data['property_agent_title']) ? $data['property_agent_title'] : null;
        $this->container['property_external_codes'] = isset($data['property_external_codes']) ? $data['property_external_codes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_agent_code
     *
     * @return string
     */
    public function getPropertyAgentCode()
    {
        return $this->container['property_agent_code'];
    }

    /**
     * Sets property_agent_code
     *
     * @param string $property_agent_code Internal 'Agent Code' referencing 'Agent'
     *
     * @return $this
     */
    public function setPropertyAgentCode($property_agent_code)
    {
        $this->container['property_agent_code'] = $property_agent_code;

        return $this;
    }

    /**
     * Gets property_agent_email1
     *
     * @return string
     */
    public function getPropertyAgentEmail1()
    {
        return $this->container['property_agent_email1'];
    }

    /**
     * Sets property_agent_email1
     *
     * @param string $property_agent_email1 1st choice email address of 'Agent'
     *
     * @return $this
     */
    public function setPropertyAgentEmail1($property_agent_email1)
    {
        $this->container['property_agent_email1'] = $property_agent_email1;

        return $this;
    }

    /**
     * Gets property_agent_email2
     *
     * @return string
     */
    public function getPropertyAgentEmail2()
    {
        return $this->container['property_agent_email2'];
    }

    /**
     * Sets property_agent_email2
     *
     * @param string $property_agent_email2 2nd choice email address of 'Agent'
     *
     * @return $this
     */
    public function setPropertyAgentEmail2($property_agent_email2)
    {
        $this->container['property_agent_email2'] = $property_agent_email2;

        return $this;
    }

    /**
     * Gets property_agent_fax
     *
     * @return string
     */
    public function getPropertyAgentFax()
    {
        return $this->container['property_agent_fax'];
    }

    /**
     * Sets property_agent_fax
     *
     * @param string $property_agent_fax Fax No. for 'Agent'
     *
     * @return $this
     */
    public function setPropertyAgentFax($property_agent_fax)
    {
        $this->container['property_agent_fax'] = $property_agent_fax;

        return $this;
    }

    /**
     * Gets property_agent_full_name
     *
     * @return string
     */
    public function getPropertyAgentFullName()
    {
        return $this->container['property_agent_full_name'];
    }

    /**
     * Sets property_agent_full_name
     *
     * @param string $property_agent_full_name Name of 'Agent'
     *
     * @return $this
     */
    public function setPropertyAgentFullName($property_agent_full_name)
    {
        $this->container['property_agent_full_name'] = $property_agent_full_name;

        return $this;
    }

    /**
     * Gets property_agent_phone_mobile
     *
     * @return string
     */
    public function getPropertyAgentPhoneMobile()
    {
        return $this->container['property_agent_phone_mobile'];
    }

    /**
     * Sets property_agent_phone_mobile
     *
     * @param string $property_agent_phone_mobile Mobile No. for 'Agent'
     *
     * @return $this
     */
    public function setPropertyAgentPhoneMobile($property_agent_phone_mobile)
    {
        $this->container['property_agent_phone_mobile'] = $property_agent_phone_mobile;

        return $this;
    }

    /**
     * Gets property_agent_phone_work
     *
     * @return string
     */
    public function getPropertyAgentPhoneWork()
    {
        return $this->container['property_agent_phone_work'];
    }

    /**
     * Sets property_agent_phone_work
     *
     * @param string $property_agent_phone_work Work No. for 'Agent'
     *
     * @return $this
     */
    public function setPropertyAgentPhoneWork($property_agent_phone_work)
    {
        $this->container['property_agent_phone_work'] = $property_agent_phone_work;

        return $this;
    }

    /**
     * Gets property_agent_title
     *
     * @return string
     */
    public function getPropertyAgentTitle()
    {
        return $this->container['property_agent_title'];
    }

    /**
     * Sets property_agent_title
     *
     * @param string $property_agent_title Title for 'Agent'
     *
     * @return $this
     */
    public function setPropertyAgentTitle($property_agent_title)
    {
        $this->container['property_agent_title'] = $property_agent_title;

        return $this;
    }

    /**
     * Gets property_external_codes
     *
     * @return string
     */
    public function getPropertyExternalCodes()
    {
        return $this->container['property_external_codes'];
    }

    /**
     * Sets property_external_codes
     *
     * @param string $property_external_codes External Codes provided by 3rd parties that require references to their own services
     *
     * @return $this
     */
    public function setPropertyExternalCodes($property_external_codes)
    {
        $this->container['property_external_codes'] = $property_external_codes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


