<?php
/**
 * V2AvailablePropertyImagesURL
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advertising Integration API
 *
 * The 'Advertising' integration focuses on allowing 3rd party systems and customized websites to sync available properties from Palace to display up-to-date advertising on a company's website.<BR><BR>The 'Advertising Integration' area does NOT require an upgrade from a 'Standard' API account to a 'Premium' API Account. There is a NO cost involved in using these contracts unless you are a 3rd Party solution provider wanting to integrate at a partner level.<BR><BR>The following is a list of contracts to integrate 'Available Properties' into a public website.  The first contract /v2AvailableProperties/JSON provides comprehensive array of currrent available properties with details.<BR><BR>  Every time the call is made to this contract it provides the current list at the time of the call.  If a property is no longer showing in the latest call that existed in previous calls you can use the /v2PreviousAvailableProperty/JSON/ contract to get information regarding the leased or withdrawn status and comments of the properties.<BR><BR> You can get a list of related images to a Property in Base64 encoded string (/v2AvailablePropertyImages/JSON) or a URL (/v2AvailablePropertyImagesURL/JSON/) directly to the JPG file.  Use the Base64 encoded option to download the images to your website<BR><BR> (NOTE: Do not use this contract to render images per request as the resulting request will be too slow to handle this).<BR><BR>  You can use the URL requests to link directly to your site.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: development@getpalace.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V2AvailablePropertyImagesURL Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2AvailablePropertyImagesURL implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v2AvailablePropertyImagesURL';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_image_code' => 'string',
        'property_image_code_global' => 'string',
        'property_image_description' => 'string',
        'property_image_url' => 'string',
        'property_image_url_thumbnail_medium' => 'string',
        'property_image_url_thumbnail_small' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_image_code' => 'string',
        'property_image_code_global' => 'string',
        'property_image_description' => 'string',
        'property_image_url' => 'string',
        'property_image_url_thumbnail_medium' => 'string',
        'property_image_url_thumbnail_small' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_image_code' => 'PropertyImageCode',
        'property_image_code_global' => 'PropertyImageCodeGlobal',
        'property_image_description' => 'PropertyImageDescription',
        'property_image_url' => 'PropertyImageURL',
        'property_image_url_thumbnail_medium' => 'PropertyImageURLThumbnailMedium',
        'property_image_url_thumbnail_small' => 'PropertyImageURLThumbnailSmall'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_image_code' => 'setPropertyImageCode',
        'property_image_code_global' => 'setPropertyImageCodeGlobal',
        'property_image_description' => 'setPropertyImageDescription',
        'property_image_url' => 'setPropertyImageUrl',
        'property_image_url_thumbnail_medium' => 'setPropertyImageUrlThumbnailMedium',
        'property_image_url_thumbnail_small' => 'setPropertyImageUrlThumbnailSmall'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_image_code' => 'getPropertyImageCode',
        'property_image_code_global' => 'getPropertyImageCodeGlobal',
        'property_image_description' => 'getPropertyImageDescription',
        'property_image_url' => 'getPropertyImageUrl',
        'property_image_url_thumbnail_medium' => 'getPropertyImageUrlThumbnailMedium',
        'property_image_url_thumbnail_small' => 'getPropertyImageUrlThumbnailSmall'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_image_code'] = isset($data['property_image_code']) ? $data['property_image_code'] : null;
        $this->container['property_image_code_global'] = isset($data['property_image_code_global']) ? $data['property_image_code_global'] : null;
        $this->container['property_image_description'] = isset($data['property_image_description']) ? $data['property_image_description'] : null;
        $this->container['property_image_url'] = isset($data['property_image_url']) ? $data['property_image_url'] : null;
        $this->container['property_image_url_thumbnail_medium'] = isset($data['property_image_url_thumbnail_medium']) ? $data['property_image_url_thumbnail_medium'] : null;
        $this->container['property_image_url_thumbnail_small'] = isset($data['property_image_url_thumbnail_small']) ? $data['property_image_url_thumbnail_small'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_image_code
     *
     * @return string
     */
    public function getPropertyImageCode()
    {
        return $this->container['property_image_code'];
    }

    /**
     * Sets property_image_code
     *
     * @param string $property_image_code Internal 'Image Code' (This is only unique to a specific image)
     *
     * @return $this
     */
    public function setPropertyImageCode($property_image_code)
    {
        $this->container['property_image_code'] = $property_image_code;

        return $this;
    }

    /**
     * Gets property_image_code_global
     *
     * @return string
     */
    public function getPropertyImageCodeGlobal()
    {
        return $this->container['property_image_code_global'];
    }

    /**
     * Sets property_image_code_global
     *
     * @param string $property_image_code_global Global 'Image Code' (This is unique across ALL Palace databases)
     *
     * @return $this
     */
    public function setPropertyImageCodeGlobal($property_image_code_global)
    {
        $this->container['property_image_code_global'] = $property_image_code_global;

        return $this;
    }

    /**
     * Gets property_image_description
     *
     * @return string
     */
    public function getPropertyImageDescription()
    {
        return $this->container['property_image_description'];
    }

    /**
     * Sets property_image_description
     *
     * @param string $property_image_description Free form user defined description.
     *
     * @return $this
     */
    public function setPropertyImageDescription($property_image_description)
    {
        $this->container['property_image_description'] = $property_image_description;

        return $this;
    }

    /**
     * Gets property_image_url
     *
     * @return string
     */
    public function getPropertyImageUrl()
    {
        return $this->container['property_image_url'];
    }

    /**
     * Sets property_image_url
     *
     * @param string $property_image_url URL to Full Image (Not resized)
     *
     * @return $this
     */
    public function setPropertyImageUrl($property_image_url)
    {
        $this->container['property_image_url'] = $property_image_url;

        return $this;
    }

    /**
     * Gets property_image_url_thumbnail_medium
     *
     * @return string
     */
    public function getPropertyImageUrlThumbnailMedium()
    {
        return $this->container['property_image_url_thumbnail_medium'];
    }

    /**
     * Sets property_image_url_thumbnail_medium
     *
     * @param string $property_image_url_thumbnail_medium URL to Image (Resized to medium thumbnail)
     *
     * @return $this
     */
    public function setPropertyImageUrlThumbnailMedium($property_image_url_thumbnail_medium)
    {
        $this->container['property_image_url_thumbnail_medium'] = $property_image_url_thumbnail_medium;

        return $this;
    }

    /**
     * Gets property_image_url_thumbnail_small
     *
     * @return string
     */
    public function getPropertyImageUrlThumbnailSmall()
    {
        return $this->container['property_image_url_thumbnail_small'];
    }

    /**
     * Sets property_image_url_thumbnail_small
     *
     * @param string $property_image_url_thumbnail_small URL to Image (Resized to small thumbnail)
     *
     * @return $this
     */
    public function setPropertyImageUrlThumbnailSmall($property_image_url_thumbnail_small)
    {
        $this->container['property_image_url_thumbnail_small'] = $property_image_url_thumbnail_small;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


