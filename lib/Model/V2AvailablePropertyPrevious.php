<?php
/**
 * V2AvailablePropertyPrevious
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advertising Integration API
 *
 * The 'Advertising' integration focuses on allowing 3rd party systems and customized websites to sync available properties from Palace to display up-to-date advertising on a company's website.<BR><BR>The 'Advertising Integration' area does NOT require an upgrade from a 'Standard' API account to a 'Premium' API Account. There is a NO cost involved in using these contracts unless you are a 3rd Party solution provider wanting to integrate at a partner level.<BR><BR>The following is a list of contracts to integrate 'Available Properties' into a public website.  The first contract /v2AvailableProperties/JSON provides comprehensive array of currrent available properties with details.<BR><BR>  Every time the call is made to this contract it provides the current list at the time of the call.  If a property is no longer showing in the latest call that existed in previous calls you can use the /v2PreviousAvailableProperty/JSON/ contract to get information regarding the leased or withdrawn status and comments of the properties.<BR><BR> You can get a list of related images to a Property in Base64 encoded string (/v2AvailablePropertyImages/JSON) or a URL (/v2AvailablePropertyImagesURL/JSON/) directly to the JPG file.  Use the Base64 encoded option to download the images to your website<BR><BR> (NOTE: Do not use this contract to render images per request as the resulting request will be too slow to handle this).<BR><BR>  You can use the URL requests to link directly to your site.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: development@getpalace.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V2AvailablePropertyPrevious Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2AvailablePropertyPrevious implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v2AvailablePropertyPrevious';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_code_global' => 'string',
        'property_date_available_removed' => 'string',
        'property_date_available_removed_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_code_global' => 'string',
        'property_date_available_removed' => 'string',
        'property_date_available_removed_reason' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_code_global' => 'PropertyCodeGlobal',
        'property_date_available_removed' => 'PropertyDateAvailableRemoved',
        'property_date_available_removed_reason' => 'PropertyDateAvailableRemovedReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_code_global' => 'setPropertyCodeGlobal',
        'property_date_available_removed' => 'setPropertyDateAvailableRemoved',
        'property_date_available_removed_reason' => 'setPropertyDateAvailableRemovedReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_code_global' => 'getPropertyCodeGlobal',
        'property_date_available_removed' => 'getPropertyDateAvailableRemoved',
        'property_date_available_removed_reason' => 'getPropertyDateAvailableRemovedReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_code_global'] = isset($data['property_code_global']) ? $data['property_code_global'] : null;
        $this->container['property_date_available_removed'] = isset($data['property_date_available_removed']) ? $data['property_date_available_removed'] : null;
        $this->container['property_date_available_removed_reason'] = isset($data['property_date_available_removed_reason']) ? $data['property_date_available_removed_reason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_code_global
     *
     * @return string
     */
    public function getPropertyCodeGlobal()
    {
        return $this->container['property_code_global'];
    }

    /**
     * Sets property_code_global
     *
     * @param string $property_code_global The 'Global Code' of the 'Property'.  This code is unique across ALL Palace databases.  It is recommended that you use 'PropertyCodeGlobal' if you are making the data public or consuming property information from multiple client databases.
     *
     * @return $this
     */
    public function setPropertyCodeGlobal($property_code_global)
    {
        $this->container['property_code_global'] = $property_code_global;

        return $this;
    }

    /**
     * Gets property_date_available_removed
     *
     * @return string
     */
    public function getPropertyDateAvailableRemoved()
    {
        return $this->container['property_date_available_removed'];
    }

    /**
     * Sets property_date_available_removed
     *
     * @param string $property_date_available_removed When the 'Date Available' was removed from the 'Property' (Marking the property as no longer available).  This will be formatted as yyyy-MM-dd
     *
     * @return $this
     */
    public function setPropertyDateAvailableRemoved($property_date_available_removed)
    {
        $this->container['property_date_available_removed'] = $property_date_available_removed;

        return $this;
    }

    /**
     * Gets property_date_available_removed_reason
     *
     * @return string
     */
    public function getPropertyDateAvailableRemovedReason()
    {
        return $this->container['property_date_available_removed_reason'];
    }

    /**
     * Sets property_date_available_removed_reason
     *
     * @param string $property_date_available_removed_reason Descripton of the 'Reason' the 'Date Available' was removed.  This is separated by a colon (See example above)
     *
     * @return $this
     */
    public function setPropertyDateAvailableRemovedReason($property_date_available_removed_reason)
    {
        $this->container['property_date_available_removed_reason'] = $property_date_available_removed_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


