<?php
/**
 * V2AvailablePropertyFeatures
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advertising Integration API
 *
 * The 'Advertising' integration focuses on allowing 3rd party systems and customized websites to sync available properties from Palace to display up-to-date advertising on a company's website.<BR><BR>The 'Advertising Integration' area does NOT require an upgrade from a 'Standard' API account to a 'Premium' API Account. There is a NO cost involved in using these contracts unless you are a 3rd Party solution provider wanting to integrate at a partner level.<BR><BR>The following is a list of contracts to integrate 'Available Properties' into a public website.  The first contract /v2AvailableProperties/JSON provides comprehensive array of currrent available properties with details.<BR><BR>  Every time the call is made to this contract it provides the current list at the time of the call.  If a property is no longer showing in the latest call that existed in previous calls you can use the /v2PreviousAvailableProperty/JSON/ contract to get information regarding the leased or withdrawn status and comments of the properties.<BR><BR> You can get a list of related images to a Property in Base64 encoded string (/v2AvailablePropertyImages/JSON) or a URL (/v2AvailablePropertyImagesURL/JSON/) directly to the JPG file.  Use the Base64 encoded option to download the images to your website<BR><BR> (NOTE: Do not use this contract to render images per request as the resulting request will be too slow to handle this).<BR><BR>  You can use the URL requests to link directly to your site.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: development@getpalace.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V2AvailablePropertyFeatures Class Doc Comment
 *
 * @category Class
 * @description These are a specific set of &#39;Feature&#39; entries avaiable for each property.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2AvailablePropertyFeatures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v2AvailablePropertyFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_advert_text' => 'string',
        'property_amenities' => 'string',
        'property_bathrooms_no' => 'string',
        'property_bedrooms_no' => 'string',
        'property_cars_no' => 'string',
        'property_class' => 'string',
        'property_ensuites_no' => 'string',
        'property_feature_details' => 'string',
        'property_floor_area' => 'string',
        'property_furnishings' => 'string',
        'property_geographic_location' => 'string',
        'property_header' => 'string',
        'property_land_area_hectares' => 'string',
        'property_land_area_m_squared' => 'string',
        'property_new_construction' => 'string',
        'property_parking' => 'string',
        'property_pets_allowed' => 'string',
        'property_post_code' => 'string',
        'property_publish_address' => 'string',
        'property_publish_entry' => 'string',
        'property_smokers_allowed' => 'string',
        'property_stories' => 'string',
        'property_virtual_tour_url' => 'string',
        'property_web_link_url' => 'string',
        'property_year_built' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_advert_text' => 'string',
        'property_amenities' => 'string',
        'property_bathrooms_no' => 'string',
        'property_bedrooms_no' => 'string',
        'property_cars_no' => 'string',
        'property_class' => 'string',
        'property_ensuites_no' => 'string',
        'property_feature_details' => 'string',
        'property_floor_area' => 'string',
        'property_furnishings' => 'string',
        'property_geographic_location' => 'string',
        'property_header' => 'string',
        'property_land_area_hectares' => 'string',
        'property_land_area_m_squared' => 'string',
        'property_new_construction' => 'string',
        'property_parking' => 'string',
        'property_pets_allowed' => 'string',
        'property_post_code' => 'string',
        'property_publish_address' => 'string',
        'property_publish_entry' => 'string',
        'property_smokers_allowed' => 'string',
        'property_stories' => 'string',
        'property_virtual_tour_url' => 'string',
        'property_web_link_url' => 'string',
        'property_year_built' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_advert_text' => 'PropertyAdvertText',
        'property_amenities' => 'PropertyAmenities',
        'property_bathrooms_no' => 'PropertyBathroomsNo',
        'property_bedrooms_no' => 'PropertyBedroomsNo',
        'property_cars_no' => 'PropertyCarsNo',
        'property_class' => 'PropertyClass',
        'property_ensuites_no' => 'PropertyEnsuitesNo',
        'property_feature_details' => 'PropertyFeatureDetails',
        'property_floor_area' => 'PropertyFloorArea',
        'property_furnishings' => 'PropertyFurnishings',
        'property_geographic_location' => 'PropertyGeographicLocation',
        'property_header' => 'PropertyHeader',
        'property_land_area_hectares' => 'PropertyLandAreaHectares',
        'property_land_area_m_squared' => 'PropertyLandAreaMSquared',
        'property_new_construction' => 'PropertyNewConstruction',
        'property_parking' => 'PropertyParking',
        'property_pets_allowed' => 'PropertyPetsAllowed',
        'property_post_code' => 'PropertyPostCode',
        'property_publish_address' => 'PropertyPublishAddress',
        'property_publish_entry' => 'PropertyPublishEntry',
        'property_smokers_allowed' => 'PropertySmokersAllowed',
        'property_stories' => 'PropertyStories',
        'property_virtual_tour_url' => 'PropertyVirtualTourURL',
        'property_web_link_url' => 'PropertyWebLinkURL',
        'property_year_built' => 'PropertyYearBuilt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_advert_text' => 'setPropertyAdvertText',
        'property_amenities' => 'setPropertyAmenities',
        'property_bathrooms_no' => 'setPropertyBathroomsNo',
        'property_bedrooms_no' => 'setPropertyBedroomsNo',
        'property_cars_no' => 'setPropertyCarsNo',
        'property_class' => 'setPropertyClass',
        'property_ensuites_no' => 'setPropertyEnsuitesNo',
        'property_feature_details' => 'setPropertyFeatureDetails',
        'property_floor_area' => 'setPropertyFloorArea',
        'property_furnishings' => 'setPropertyFurnishings',
        'property_geographic_location' => 'setPropertyGeographicLocation',
        'property_header' => 'setPropertyHeader',
        'property_land_area_hectares' => 'setPropertyLandAreaHectares',
        'property_land_area_m_squared' => 'setPropertyLandAreaMSquared',
        'property_new_construction' => 'setPropertyNewConstruction',
        'property_parking' => 'setPropertyParking',
        'property_pets_allowed' => 'setPropertyPetsAllowed',
        'property_post_code' => 'setPropertyPostCode',
        'property_publish_address' => 'setPropertyPublishAddress',
        'property_publish_entry' => 'setPropertyPublishEntry',
        'property_smokers_allowed' => 'setPropertySmokersAllowed',
        'property_stories' => 'setPropertyStories',
        'property_virtual_tour_url' => 'setPropertyVirtualTourUrl',
        'property_web_link_url' => 'setPropertyWebLinkUrl',
        'property_year_built' => 'setPropertyYearBuilt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_advert_text' => 'getPropertyAdvertText',
        'property_amenities' => 'getPropertyAmenities',
        'property_bathrooms_no' => 'getPropertyBathroomsNo',
        'property_bedrooms_no' => 'getPropertyBedroomsNo',
        'property_cars_no' => 'getPropertyCarsNo',
        'property_class' => 'getPropertyClass',
        'property_ensuites_no' => 'getPropertyEnsuitesNo',
        'property_feature_details' => 'getPropertyFeatureDetails',
        'property_floor_area' => 'getPropertyFloorArea',
        'property_furnishings' => 'getPropertyFurnishings',
        'property_geographic_location' => 'getPropertyGeographicLocation',
        'property_header' => 'getPropertyHeader',
        'property_land_area_hectares' => 'getPropertyLandAreaHectares',
        'property_land_area_m_squared' => 'getPropertyLandAreaMSquared',
        'property_new_construction' => 'getPropertyNewConstruction',
        'property_parking' => 'getPropertyParking',
        'property_pets_allowed' => 'getPropertyPetsAllowed',
        'property_post_code' => 'getPropertyPostCode',
        'property_publish_address' => 'getPropertyPublishAddress',
        'property_publish_entry' => 'getPropertyPublishEntry',
        'property_smokers_allowed' => 'getPropertySmokersAllowed',
        'property_stories' => 'getPropertyStories',
        'property_virtual_tour_url' => 'getPropertyVirtualTourUrl',
        'property_web_link_url' => 'getPropertyWebLinkUrl',
        'property_year_built' => 'getPropertyYearBuilt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_advert_text'] = isset($data['property_advert_text']) ? $data['property_advert_text'] : null;
        $this->container['property_amenities'] = isset($data['property_amenities']) ? $data['property_amenities'] : null;
        $this->container['property_bathrooms_no'] = isset($data['property_bathrooms_no']) ? $data['property_bathrooms_no'] : null;
        $this->container['property_bedrooms_no'] = isset($data['property_bedrooms_no']) ? $data['property_bedrooms_no'] : null;
        $this->container['property_cars_no'] = isset($data['property_cars_no']) ? $data['property_cars_no'] : null;
        $this->container['property_class'] = isset($data['property_class']) ? $data['property_class'] : null;
        $this->container['property_ensuites_no'] = isset($data['property_ensuites_no']) ? $data['property_ensuites_no'] : null;
        $this->container['property_feature_details'] = isset($data['property_feature_details']) ? $data['property_feature_details'] : null;
        $this->container['property_floor_area'] = isset($data['property_floor_area']) ? $data['property_floor_area'] : null;
        $this->container['property_furnishings'] = isset($data['property_furnishings']) ? $data['property_furnishings'] : null;
        $this->container['property_geographic_location'] = isset($data['property_geographic_location']) ? $data['property_geographic_location'] : null;
        $this->container['property_header'] = isset($data['property_header']) ? $data['property_header'] : null;
        $this->container['property_land_area_hectares'] = isset($data['property_land_area_hectares']) ? $data['property_land_area_hectares'] : null;
        $this->container['property_land_area_m_squared'] = isset($data['property_land_area_m_squared']) ? $data['property_land_area_m_squared'] : null;
        $this->container['property_new_construction'] = isset($data['property_new_construction']) ? $data['property_new_construction'] : null;
        $this->container['property_parking'] = isset($data['property_parking']) ? $data['property_parking'] : null;
        $this->container['property_pets_allowed'] = isset($data['property_pets_allowed']) ? $data['property_pets_allowed'] : null;
        $this->container['property_post_code'] = isset($data['property_post_code']) ? $data['property_post_code'] : null;
        $this->container['property_publish_address'] = isset($data['property_publish_address']) ? $data['property_publish_address'] : null;
        $this->container['property_publish_entry'] = isset($data['property_publish_entry']) ? $data['property_publish_entry'] : null;
        $this->container['property_smokers_allowed'] = isset($data['property_smokers_allowed']) ? $data['property_smokers_allowed'] : null;
        $this->container['property_stories'] = isset($data['property_stories']) ? $data['property_stories'] : null;
        $this->container['property_virtual_tour_url'] = isset($data['property_virtual_tour_url']) ? $data['property_virtual_tour_url'] : null;
        $this->container['property_web_link_url'] = isset($data['property_web_link_url']) ? $data['property_web_link_url'] : null;
        $this->container['property_year_built'] = isset($data['property_year_built']) ? $data['property_year_built'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_advert_text
     *
     * @return string
     */
    public function getPropertyAdvertText()
    {
        return $this->container['property_advert_text'];
    }

    /**
     * Sets property_advert_text
     *
     * @param string $property_advert_text Advertising body
     *
     * @return $this
     */
    public function setPropertyAdvertText($property_advert_text)
    {
        $this->container['property_advert_text'] = $property_advert_text;

        return $this;
    }

    /**
     * Gets property_amenities
     *
     * @return string
     */
    public function getPropertyAmenities()
    {
        return $this->container['property_amenities'];
    }

    /**
     * Sets property_amenities
     *
     * @param string $property_amenities Amenities close to property
     *
     * @return $this
     */
    public function setPropertyAmenities($property_amenities)
    {
        $this->container['property_amenities'] = $property_amenities;

        return $this;
    }

    /**
     * Gets property_bathrooms_no
     *
     * @return string
     */
    public function getPropertyBathroomsNo()
    {
        return $this->container['property_bathrooms_no'];
    }

    /**
     * Sets property_bathrooms_no
     *
     * @param string $property_bathrooms_no No. of bathrooms.
     *
     * @return $this
     */
    public function setPropertyBathroomsNo($property_bathrooms_no)
    {
        $this->container['property_bathrooms_no'] = $property_bathrooms_no;

        return $this;
    }

    /**
     * Gets property_bedrooms_no
     *
     * @return string
     */
    public function getPropertyBedroomsNo()
    {
        return $this->container['property_bedrooms_no'];
    }

    /**
     * Sets property_bedrooms_no
     *
     * @param string $property_bedrooms_no No. of bedrooms.
     *
     * @return $this
     */
    public function setPropertyBedroomsNo($property_bedrooms_no)
    {
        $this->container['property_bedrooms_no'] = $property_bedrooms_no;

        return $this;
    }

    /**
     * Gets property_cars_no
     *
     * @return string
     */
    public function getPropertyCarsNo()
    {
        return $this->container['property_cars_no'];
    }

    /**
     * Sets property_cars_no
     *
     * @param string $property_cars_no No. of carports.
     *
     * @return $this
     */
    public function setPropertyCarsNo($property_cars_no)
    {
        $this->container['property_cars_no'] = $property_cars_no;

        return $this;
    }

    /**
     * Gets property_class
     *
     * @return string
     */
    public function getPropertyClass()
    {
        return $this->container['property_class'];
    }

    /**
     * Sets property_class
     *
     * @param string $property_class This will be one of the following options (Apartment, House, Home and Income, Lifestyle, Unit, Townhouse, Holiday Home, Section Res, Flats).
     *
     * @return $this
     */
    public function setPropertyClass($property_class)
    {
        $this->container['property_class'] = $property_class;

        return $this;
    }

    /**
     * Gets property_ensuites_no
     *
     * @return string
     */
    public function getPropertyEnsuitesNo()
    {
        return $this->container['property_ensuites_no'];
    }

    /**
     * Sets property_ensuites_no
     *
     * @param string $property_ensuites_no No. of ensuites.
     *
     * @return $this
     */
    public function setPropertyEnsuitesNo($property_ensuites_no)
    {
        $this->container['property_ensuites_no'] = $property_ensuites_no;

        return $this;
    }

    /**
     * Gets property_feature_details
     *
     * @return string
     */
    public function getPropertyFeatureDetails()
    {
        return $this->container['property_feature_details'];
    }

    /**
     * Sets property_feature_details
     *
     * @param string $property_feature_details Free form list of other features
     *
     * @return $this
     */
    public function setPropertyFeatureDetails($property_feature_details)
    {
        $this->container['property_feature_details'] = $property_feature_details;

        return $this;
    }

    /**
     * Gets property_floor_area
     *
     * @return string
     */
    public function getPropertyFloorArea()
    {
        return $this->container['property_floor_area'];
    }

    /**
     * Sets property_floor_area
     *
     * @param string $property_floor_area Floor area in metres (squared
     *
     * @return $this
     */
    public function setPropertyFloorArea($property_floor_area)
    {
        $this->container['property_floor_area'] = $property_floor_area;

        return $this;
    }

    /**
     * Gets property_furnishings
     *
     * @return string
     */
    public function getPropertyFurnishings()
    {
        return $this->container['property_furnishings'];
    }

    /**
     * Sets property_furnishings
     *
     * @param string $property_furnishings Free form list of furnishings within the property
     *
     * @return $this
     */
    public function setPropertyFurnishings($property_furnishings)
    {
        $this->container['property_furnishings'] = $property_furnishings;

        return $this;
    }

    /**
     * Gets property_geographic_location
     *
     * @return string
     */
    public function getPropertyGeographicLocation()
    {
        return $this->container['property_geographic_location'];
    }

    /**
     * Sets property_geographic_location
     *
     * @param string $property_geographic_location latitude and longitude separted by : (From Google Maps API)
     *
     * @return $this
     */
    public function setPropertyGeographicLocation($property_geographic_location)
    {
        $this->container['property_geographic_location'] = $property_geographic_location;

        return $this;
    }

    /**
     * Gets property_header
     *
     * @return string
     */
    public function getPropertyHeader()
    {
        return $this->container['property_header'];
    }

    /**
     * Sets property_header
     *
     * @param string $property_header Header for the 'Advert Text'.
     *
     * @return $this
     */
    public function setPropertyHeader($property_header)
    {
        $this->container['property_header'] = $property_header;

        return $this;
    }

    /**
     * Gets property_land_area_hectares
     *
     * @return string
     */
    public function getPropertyLandAreaHectares()
    {
        return $this->container['property_land_area_hectares'];
    }

    /**
     * Sets property_land_area_hectares
     *
     * @param string $property_land_area_hectares Land area in hectares
     *
     * @return $this
     */
    public function setPropertyLandAreaHectares($property_land_area_hectares)
    {
        $this->container['property_land_area_hectares'] = $property_land_area_hectares;

        return $this;
    }

    /**
     * Gets property_land_area_m_squared
     *
     * @return string
     */
    public function getPropertyLandAreaMSquared()
    {
        return $this->container['property_land_area_m_squared'];
    }

    /**
     * Sets property_land_area_m_squared
     *
     * @param string $property_land_area_m_squared Land area in metres (squared)
     *
     * @return $this
     */
    public function setPropertyLandAreaMSquared($property_land_area_m_squared)
    {
        $this->container['property_land_area_m_squared'] = $property_land_area_m_squared;

        return $this;
    }

    /**
     * Gets property_new_construction
     *
     * @return string
     */
    public function getPropertyNewConstruction()
    {
        return $this->container['property_new_construction'];
    }

    /**
     * Sets property_new_construction
     *
     * @param string $property_new_construction Is the 'Property' a new construction (Yes / No)
     *
     * @return $this
     */
    public function setPropertyNewConstruction($property_new_construction)
    {
        $this->container['property_new_construction'] = $property_new_construction;

        return $this;
    }

    /**
     * Gets property_parking
     *
     * @return string
     */
    public function getPropertyParking()
    {
        return $this->container['property_parking'];
    }

    /**
     * Sets property_parking
     *
     * @param string $property_parking This can be a number or free form text
     *
     * @return $this
     */
    public function setPropertyParking($property_parking)
    {
        $this->container['property_parking'] = $property_parking;

        return $this;
    }

    /**
     * Gets property_pets_allowed
     *
     * @return string
     */
    public function getPropertyPetsAllowed()
    {
        return $this->container['property_pets_allowed'];
    }

    /**
     * Sets property_pets_allowed
     *
     * @param string $property_pets_allowed Is the 'Property' allowed to have pets (Yes / No)
     *
     * @return $this
     */
    public function setPropertyPetsAllowed($property_pets_allowed)
    {
        $this->container['property_pets_allowed'] = $property_pets_allowed;

        return $this;
    }

    /**
     * Gets property_post_code
     *
     * @return string
     */
    public function getPropertyPostCode()
    {
        return $this->container['property_post_code'];
    }

    /**
     * Sets property_post_code
     *
     * @param string $property_post_code 'Post Code' of Property
     *
     * @return $this
     */
    public function setPropertyPostCode($property_post_code)
    {
        $this->container['property_post_code'] = $property_post_code;

        return $this;
    }

    /**
     * Gets property_publish_address
     *
     * @return string
     */
    public function getPropertyPublishAddress()
    {
        return $this->container['property_publish_address'];
    }

    /**
     * Sets property_publish_address
     *
     * @param string $property_publish_address Should the 'Property Address' be published online
     *
     * @return $this
     */
    public function setPropertyPublishAddress($property_publish_address)
    {
        $this->container['property_publish_address'] = $property_publish_address;

        return $this;
    }

    /**
     * Gets property_publish_entry
     *
     * @return string
     */
    public function getPropertyPublishEntry()
    {
        return $this->container['property_publish_entry'];
    }

    /**
     * Sets property_publish_entry
     *
     * @param string $property_publish_entry Should the 'Property' entry be published online
     *
     * @return $this
     */
    public function setPropertyPublishEntry($property_publish_entry)
    {
        $this->container['property_publish_entry'] = $property_publish_entry;

        return $this;
    }

    /**
     * Gets property_smokers_allowed
     *
     * @return string
     */
    public function getPropertySmokersAllowed()
    {
        return $this->container['property_smokers_allowed'];
    }

    /**
     * Sets property_smokers_allowed
     *
     * @param string $property_smokers_allowed Is the 'Property' allowed smoking on premise (Yes / No)
     *
     * @return $this
     */
    public function setPropertySmokersAllowed($property_smokers_allowed)
    {
        $this->container['property_smokers_allowed'] = $property_smokers_allowed;

        return $this;
    }

    /**
     * Gets property_stories
     *
     * @return string
     */
    public function getPropertyStories()
    {
        return $this->container['property_stories'];
    }

    /**
     * Sets property_stories
     *
     * @param string $property_stories Number of Storeys of the property
     *
     * @return $this
     */
    public function setPropertyStories($property_stories)
    {
        $this->container['property_stories'] = $property_stories;

        return $this;
    }

    /**
     * Gets property_virtual_tour_url
     *
     * @return string
     */
    public function getPropertyVirtualTourUrl()
    {
        return $this->container['property_virtual_tour_url'];
    }

    /**
     * Sets property_virtual_tour_url
     *
     * @param string $property_virtual_tour_url URL of 'Virtual Tour' or 'Video'
     *
     * @return $this
     */
    public function setPropertyVirtualTourUrl($property_virtual_tour_url)
    {
        $this->container['property_virtual_tour_url'] = $property_virtual_tour_url;

        return $this;
    }

    /**
     * Gets property_web_link_url
     *
     * @return string
     */
    public function getPropertyWebLinkUrl()
    {
        return $this->container['property_web_link_url'];
    }

    /**
     * Sets property_web_link_url
     *
     * @param string $property_web_link_url Link to website or listing URL
     *
     * @return $this
     */
    public function setPropertyWebLinkUrl($property_web_link_url)
    {
        $this->container['property_web_link_url'] = $property_web_link_url;

        return $this;
    }

    /**
     * Gets property_year_built
     *
     * @return string
     */
    public function getPropertyYearBuilt()
    {
        return $this->container['property_year_built'];
    }

    /**
     * Sets property_year_built
     *
     * @param string $property_year_built Year the property was built.
     *
     * @return $this
     */
    public function setPropertyYearBuilt($property_year_built)
    {
        $this->container['property_year_built'] = $property_year_built;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


