<?php
/**
 * V2AvailablePropertyDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Advertising Integration API
 *
 * The 'Advertising' integration focuses on allowing 3rd party systems and customized websites to sync available properties from Palace to display up-to-date advertising on a company's website.<BR><BR>The 'Advertising Integration' area does NOT require an upgrade from a 'Standard' API account to a 'Premium' API Account. There is a NO cost involved in using these contracts unless you are a 3rd Party solution provider wanting to integrate at a partner level.<BR><BR>The following is a list of contracts to integrate 'Available Properties' into a public website.  The first contract /v2AvailableProperties/JSON provides comprehensive array of currrent available properties with details.<BR><BR>  Every time the call is made to this contract it provides the current list at the time of the call.  If a property is no longer showing in the latest call that existed in previous calls you can use the /v2PreviousAvailableProperty/JSON/ contract to get information regarding the leased or withdrawn status and comments of the properties.<BR><BR> You can get a list of related images to a Property in Base64 encoded string (/v2AvailablePropertyImages/JSON) or a URL (/v2AvailablePropertyImagesURL/JSON/) directly to the JPG file.  Use the Base64 encoded option to download the images to your website<BR><BR> (NOTE: Do not use this contract to render images per request as the resulting request will be too slow to handle this).<BR><BR>  You can use the URL requests to link directly to your site.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: development@getpalace.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V2AvailablePropertyDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2AvailablePropertyDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v2AvailablePropertyDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_address1' => 'string',
        'property_address2' => 'string',
        'property_address3' => 'string',
        'property_address4' => 'string',
        'property_agent' => '\Swagger\Client\Model\V2AvailablePropertyAgentDetails',
        'property_change_code' => 'double',
        'property_code' => 'string',
        'property_code_global' => 'string',
        'property_custom_list' => '\Swagger\Client\Model\V2AvailablePropertyCustomList[]',
        'property_date_available' => 'string',
        'property_features' => '\Swagger\Client\Model\V2AvailablePropertyFeatures',
        'property_grid' => 'string',
        'property_management_type' => 'string',
        'property_name' => 'string',
        'property_owner_code' => 'string',
        'property_rent_amount' => 'double',
        'property_rental_period' => 'string',
        'property_sort_code' => 'string',
        'property_status' => 'string',
        'property_suburb' => '\Swagger\Client\Model\V2AvailablePropertySuburbs[]',
        'property_unit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_address1' => 'string',
        'property_address2' => 'string',
        'property_address3' => 'string',
        'property_address4' => 'string',
        'property_agent' => null,
        'property_change_code' => 'double',
        'property_code' => 'string',
        'property_code_global' => 'string',
        'property_custom_list' => null,
        'property_date_available' => 'string',
        'property_features' => null,
        'property_grid' => 'string',
        'property_management_type' => 'string',
        'property_name' => 'string',
        'property_owner_code' => 'string',
        'property_rent_amount' => 'double',
        'property_rental_period' => 'string',
        'property_sort_code' => 'string',
        'property_status' => 'string',
        'property_suburb' => null,
        'property_unit' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_address1' => 'PropertyAddress1',
        'property_address2' => 'PropertyAddress2',
        'property_address3' => 'PropertyAddress3',
        'property_address4' => 'PropertyAddress4',
        'property_agent' => 'PropertyAgent',
        'property_change_code' => 'PropertyChangeCode',
        'property_code' => 'PropertyCode',
        'property_code_global' => 'PropertyCodeGlobal',
        'property_custom_list' => 'PropertyCustomList',
        'property_date_available' => 'PropertyDateAvailable',
        'property_features' => 'PropertyFeatures',
        'property_grid' => 'PropertyGrid',
        'property_management_type' => 'PropertyManagementType',
        'property_name' => 'PropertyName',
        'property_owner_code' => 'PropertyOwnerCode',
        'property_rent_amount' => 'PropertyRentAmount',
        'property_rental_period' => 'PropertyRentalPeriod',
        'property_sort_code' => 'PropertySortCode',
        'property_status' => 'PropertyStatus',
        'property_suburb' => 'PropertySuburb',
        'property_unit' => 'PropertyUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_address1' => 'setPropertyAddress1',
        'property_address2' => 'setPropertyAddress2',
        'property_address3' => 'setPropertyAddress3',
        'property_address4' => 'setPropertyAddress4',
        'property_agent' => 'setPropertyAgent',
        'property_change_code' => 'setPropertyChangeCode',
        'property_code' => 'setPropertyCode',
        'property_code_global' => 'setPropertyCodeGlobal',
        'property_custom_list' => 'setPropertyCustomList',
        'property_date_available' => 'setPropertyDateAvailable',
        'property_features' => 'setPropertyFeatures',
        'property_grid' => 'setPropertyGrid',
        'property_management_type' => 'setPropertyManagementType',
        'property_name' => 'setPropertyName',
        'property_owner_code' => 'setPropertyOwnerCode',
        'property_rent_amount' => 'setPropertyRentAmount',
        'property_rental_period' => 'setPropertyRentalPeriod',
        'property_sort_code' => 'setPropertySortCode',
        'property_status' => 'setPropertyStatus',
        'property_suburb' => 'setPropertySuburb',
        'property_unit' => 'setPropertyUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_address1' => 'getPropertyAddress1',
        'property_address2' => 'getPropertyAddress2',
        'property_address3' => 'getPropertyAddress3',
        'property_address4' => 'getPropertyAddress4',
        'property_agent' => 'getPropertyAgent',
        'property_change_code' => 'getPropertyChangeCode',
        'property_code' => 'getPropertyCode',
        'property_code_global' => 'getPropertyCodeGlobal',
        'property_custom_list' => 'getPropertyCustomList',
        'property_date_available' => 'getPropertyDateAvailable',
        'property_features' => 'getPropertyFeatures',
        'property_grid' => 'getPropertyGrid',
        'property_management_type' => 'getPropertyManagementType',
        'property_name' => 'getPropertyName',
        'property_owner_code' => 'getPropertyOwnerCode',
        'property_rent_amount' => 'getPropertyRentAmount',
        'property_rental_period' => 'getPropertyRentalPeriod',
        'property_sort_code' => 'getPropertySortCode',
        'property_status' => 'getPropertyStatus',
        'property_suburb' => 'getPropertySuburb',
        'property_unit' => 'getPropertyUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_address1'] = isset($data['property_address1']) ? $data['property_address1'] : null;
        $this->container['property_address2'] = isset($data['property_address2']) ? $data['property_address2'] : null;
        $this->container['property_address3'] = isset($data['property_address3']) ? $data['property_address3'] : null;
        $this->container['property_address4'] = isset($data['property_address4']) ? $data['property_address4'] : null;
        $this->container['property_agent'] = isset($data['property_agent']) ? $data['property_agent'] : null;
        $this->container['property_change_code'] = isset($data['property_change_code']) ? $data['property_change_code'] : null;
        $this->container['property_code'] = isset($data['property_code']) ? $data['property_code'] : null;
        $this->container['property_code_global'] = isset($data['property_code_global']) ? $data['property_code_global'] : null;
        $this->container['property_custom_list'] = isset($data['property_custom_list']) ? $data['property_custom_list'] : null;
        $this->container['property_date_available'] = isset($data['property_date_available']) ? $data['property_date_available'] : null;
        $this->container['property_features'] = isset($data['property_features']) ? $data['property_features'] : null;
        $this->container['property_grid'] = isset($data['property_grid']) ? $data['property_grid'] : null;
        $this->container['property_management_type'] = isset($data['property_management_type']) ? $data['property_management_type'] : null;
        $this->container['property_name'] = isset($data['property_name']) ? $data['property_name'] : null;
        $this->container['property_owner_code'] = isset($data['property_owner_code']) ? $data['property_owner_code'] : null;
        $this->container['property_rent_amount'] = isset($data['property_rent_amount']) ? $data['property_rent_amount'] : null;
        $this->container['property_rental_period'] = isset($data['property_rental_period']) ? $data['property_rental_period'] : null;
        $this->container['property_sort_code'] = isset($data['property_sort_code']) ? $data['property_sort_code'] : null;
        $this->container['property_status'] = isset($data['property_status']) ? $data['property_status'] : null;
        $this->container['property_suburb'] = isset($data['property_suburb']) ? $data['property_suburb'] : null;
        $this->container['property_unit'] = isset($data['property_unit']) ? $data['property_unit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_address1
     *
     * @return string
     */
    public function getPropertyAddress1()
    {
        return $this->container['property_address1'];
    }

    /**
     * Sets property_address1
     *
     * @param string $property_address1 'Street No.' in in a 'Street Address'
     *
     * @return $this
     */
    public function setPropertyAddress1($property_address1)
    {
        $this->container['property_address1'] = $property_address1;

        return $this;
    }

    /**
     * Gets property_address2
     *
     * @return string
     */
    public function getPropertyAddress2()
    {
        return $this->container['property_address2'];
    }

    /**
     * Sets property_address2
     *
     * @param string $property_address2 'Street Name' in in a 'Street Address'
     *
     * @return $this
     */
    public function setPropertyAddress2($property_address2)
    {
        $this->container['property_address2'] = $property_address2;

        return $this;
    }

    /**
     * Gets property_address3
     *
     * @return string
     */
    public function getPropertyAddress3()
    {
        return $this->container['property_address3'];
    }

    /**
     * Sets property_address3
     *
     * @param string $property_address3 'Suburb' in in a 'Street Address'
     *
     * @return $this
     */
    public function setPropertyAddress3($property_address3)
    {
        $this->container['property_address3'] = $property_address3;

        return $this;
    }

    /**
     * Gets property_address4
     *
     * @return string
     */
    public function getPropertyAddress4()
    {
        return $this->container['property_address4'];
    }

    /**
     * Sets property_address4
     *
     * @param string $property_address4 'City' in in a 'Street Address'
     *
     * @return $this
     */
    public function setPropertyAddress4($property_address4)
    {
        $this->container['property_address4'] = $property_address4;

        return $this;
    }

    /**
     * Gets property_agent
     *
     * @return \Swagger\Client\Model\V2AvailablePropertyAgentDetails
     */
    public function getPropertyAgent()
    {
        return $this->container['property_agent'];
    }

    /**
     * Sets property_agent
     *
     * @param \Swagger\Client\Model\V2AvailablePropertyAgentDetails $property_agent property_agent
     *
     * @return $this
     */
    public function setPropertyAgent($property_agent)
    {
        $this->container['property_agent'] = $property_agent;

        return $this;
    }

    /**
     * Gets property_change_code
     *
     * @return double
     */
    public function getPropertyChangeCode()
    {
        return $this->container['property_change_code'];
    }

    /**
     * Sets property_change_code
     *
     * @param double $property_change_code Code indicating how many times this record has been updated.  The code is incremented by 1 on each update.  This can also be used to track if the record has been updated since the last request.
     *
     * @return $this
     */
    public function setPropertyChangeCode($property_change_code)
    {
        $this->container['property_change_code'] = $property_change_code;

        return $this;
    }

    /**
     * Gets property_code
     *
     * @return string
     */
    public function getPropertyCode()
    {
        return $this->container['property_code'];
    }

    /**
     * Sets property_code
     *
     * @param string $property_code The 'Internal Code' of the 'Property'.  This code is only unique within the client database.  It is recommended that you use 'PropertyCodeGlobal' if you are making the data public or consuming property information from multiple client databases.
     *
     * @return $this
     */
    public function setPropertyCode($property_code)
    {
        $this->container['property_code'] = $property_code;

        return $this;
    }

    /**
     * Gets property_code_global
     *
     * @return string
     */
    public function getPropertyCodeGlobal()
    {
        return $this->container['property_code_global'];
    }

    /**
     * Sets property_code_global
     *
     * @param string $property_code_global The 'Global Code' of the 'Property'.  This code is unique across ALL Palace databases.  It is recommended that you use 'PropertyCodeGlobal' if you are making the data public or consuming property information from multiple client databases.
     *
     * @return $this
     */
    public function setPropertyCodeGlobal($property_code_global)
    {
        $this->container['property_code_global'] = $property_code_global;

        return $this;
    }

    /**
     * Gets property_custom_list
     *
     * @return \Swagger\Client\Model\V2AvailablePropertyCustomList[]
     */
    public function getPropertyCustomList()
    {
        return $this->container['property_custom_list'];
    }

    /**
     * Sets property_custom_list
     *
     * @param \Swagger\Client\Model\V2AvailablePropertyCustomList[] $property_custom_list property_custom_list
     *
     * @return $this
     */
    public function setPropertyCustomList($property_custom_list)
    {
        $this->container['property_custom_list'] = $property_custom_list;

        return $this;
    }

    /**
     * Gets property_date_available
     *
     * @return string
     */
    public function getPropertyDateAvailable()
    {
        return $this->container['property_date_available'];
    }

    /**
     * Sets property_date_available
     *
     * @param string $property_date_available Date the property is available from.  This will be formatted as yyyy-MM-dd
     *
     * @return $this
     */
    public function setPropertyDateAvailable($property_date_available)
    {
        $this->container['property_date_available'] = $property_date_available;

        return $this;
    }

    /**
     * Gets property_features
     *
     * @return \Swagger\Client\Model\V2AvailablePropertyFeatures
     */
    public function getPropertyFeatures()
    {
        return $this->container['property_features'];
    }

    /**
     * Sets property_features
     *
     * @param \Swagger\Client\Model\V2AvailablePropertyFeatures $property_features property_features
     *
     * @return $this
     */
    public function setPropertyFeatures($property_features)
    {
        $this->container['property_features'] = $property_features;

        return $this;
    }

    /**
     * Gets property_grid
     *
     * @return string
     */
    public function getPropertyGrid()
    {
        return $this->container['property_grid'];
    }

    /**
     * Sets property_grid
     *
     * @param string $property_grid Generally is used as in 'Internal' reference for a 'Map Grid' for grouping purposes.
     *
     * @return $this
     */
    public function setPropertyGrid($property_grid)
    {
        $this->container['property_grid'] = $property_grid;

        return $this;
    }

    /**
     * Gets property_management_type
     *
     * @return string
     */
    public function getPropertyManagementType()
    {
        return $this->container['property_management_type'];
    }

    /**
     * Sets property_management_type
     *
     * @param string $property_management_type A description of the 'Management Type' of the property.  Although these descriptions can be defined by the user, Palace has a 'Pattern Criteria' definiting 4 specific types of 'Managements'. Descriptions containing the word 'Manage' specifies a residential management.  Descriptions containing the word 'Casual' specifies a casual property. Descriptions containing the word 'Commercial' specifies a commercial management.  Descriptions containing the word 'Holiday' specifies a holiday management
     *
     * @return $this
     */
    public function setPropertyManagementType($property_management_type)
    {
        $this->container['property_management_type'] = $property_management_type;

        return $this;
    }

    /**
     * Gets property_name
     *
     * @return string
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     *
     * @param string $property_name This is user defined 'Free Form' text giving a name to a property (NOTE: This is not the same as the address of the property)
     *
     * @return $this
     */
    public function setPropertyName($property_name)
    {
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets property_owner_code
     *
     * @return string
     */
    public function getPropertyOwnerCode()
    {
        return $this->container['property_owner_code'];
    }

    /**
     * Sets property_owner_code
     *
     * @param string $property_owner_code Internal code assigned to the 'Owner' of the property.
     *
     * @return $this
     */
    public function setPropertyOwnerCode($property_owner_code)
    {
        $this->container['property_owner_code'] = $property_owner_code;

        return $this;
    }

    /**
     * Gets property_rent_amount
     *
     * @return double
     */
    public function getPropertyRentAmount()
    {
        return $this->container['property_rent_amount'];
    }

    /**
     * Sets property_rent_amount
     *
     * @param double $property_rent_amount This is the amount of the rent.
     *
     * @return $this
     */
    public function setPropertyRentAmount($property_rent_amount)
    {
        $this->container['property_rent_amount'] = $property_rent_amount;

        return $this;
    }

    /**
     * Gets property_rental_period
     *
     * @return string
     */
    public function getPropertyRentalPeriod()
    {
        return $this->container['property_rental_period'];
    }

    /**
     * Sets property_rental_period
     *
     * @param string $property_rental_period This is related to the the 'PropertyRentAmount' field (e.g. 200 / Week).  The 'Rental Period' indicates how often the rent should be paid on this property.  Options are Day, Week, Fortnight, Month
     *
     * @return $this
     */
    public function setPropertyRentalPeriod($property_rental_period)
    {
        $this->container['property_rental_period'] = $property_rental_period;

        return $this;
    }

    /**
     * Gets property_sort_code
     *
     * @return string
     */
    public function getPropertySortCode()
    {
        return $this->container['property_sort_code'];
    }

    /**
     * Sets property_sort_code
     *
     * @param string $property_sort_code This is a user defined code for sorting.  Generally, this will be the same as the 'Street Addres' name
     *
     * @return $this
     */
    public function setPropertySortCode($property_sort_code)
    {
        $this->container['property_sort_code'] = $property_sort_code;

        return $this;
    }

    /**
     * Gets property_status
     *
     * @return string
     */
    public function getPropertyStatus()
    {
        return $this->container['property_status'];
    }

    /**
     * Sets property_status
     *
     * @param string $property_status This value will be 'Active' or 'Inactive' and indicates if the 'Property' is an active management at this time (NOTE: An 'Inactive' management may suggest the 'Property' is having work done at this time and cannot currently be rented)
     *
     * @return $this
     */
    public function setPropertyStatus($property_status)
    {
        $this->container['property_status'] = $property_status;

        return $this;
    }

    /**
     * Gets property_suburb
     *
     * @return \Swagger\Client\Model\V2AvailablePropertySuburbs[]
     */
    public function getPropertySuburb()
    {
        return $this->container['property_suburb'];
    }

    /**
     * Sets property_suburb
     *
     * @param \Swagger\Client\Model\V2AvailablePropertySuburbs[] $property_suburb property_suburb
     *
     * @return $this
     */
    public function setPropertySuburb($property_suburb)
    {
        $this->container['property_suburb'] = $property_suburb;

        return $this;
    }

    /**
     * Gets property_unit
     *
     * @return string
     */
    public function getPropertyUnit()
    {
        return $this->container['property_unit'];
    }

    /**
     * Sets property_unit
     *
     * @param string $property_unit The 'Unit' of the 'Property'.  If displaying the full 'Property Address' and a 'Unit' exists, the system should display 'Unit / PropertyAddress1' (e.g. 1/15 Stuart Street).
     *
     * @return $this
     */
    public function setPropertyUnit($property_unit)
    {
        $this->container['property_unit'] = $property_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


